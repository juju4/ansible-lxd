---
dist: xenial
sudo: required
rvm:
  - 2.6

env:
#  - distribution: centos
#    version: 6
#  - distribution: centos
#    version: 7
#    ansible_version: 2.7.6
#    cryptography_version: 2.5.0
  - distribution: ubuntu
    version: 18.04
    ansible_version: 2.7.6
    cryptography_version: 2.5.0
  - distribution: ubuntu
    version: 16.04
    ansible_version: 2.7.6
    cryptography_version: 2.5.0
#   - distribution: ubuntu
#     version: 14.04
#     ansible_version: 2.6.13
#     cryptography_version: 2.0.3
#  - distribution: ubuntu
#    version: 12.04
#  - distribution: alpine
#    version: 3.4
## past ansible versions
  - distribution: ubuntu
    version: 16.04
    ansible_version: 2.6.13
    cryptography_version: 2.5.0

before_install:
  - env
  - pwd
  - find -ls
## use appropriate role path and not github name
  - "[ -f get-dependencies.sh ] && sh -x get-dependencies.sh"
  - echo "deb http://archive.ubuntu.com/ubuntu xenial-backports main restricted universe multiverse" | sudo tee /etc/apt/sources.list.d/xenial-backports.list
  - sudo apt-get update -qq
  - sudo apt -t xenial-backports -y install lxd acl dnsmasq-base zfsutils-linux rng-tools -q
## change of group implies logout+login to apply... can't do with travis = run as root (sic)    = use 'newgrp lxd' ? = travis stalling all ...
## https://github.com/travis-ci/travis-ci/issues/1839   or chain: sudo -E su $USER -c "..."
  - sudo usermod -G lxd travis
  # Pull container
  - sudo -E su $USER -c "lxc remote list"
  - sudo -E su $USER -c "lxc image list"
## pre-download base images
  - 'sudo -E su $USER -c "[ ${distribution} == ubuntu ] || lxc image copy images:${distribution}/${version}/amd64 local: --alias=${distribution}-${version}-nossh"'
  - 'sudo -E su $USER -c "[ ${distribution} == alpine ] || lxc image copy images:${distribution}/${version}/amd64 local: --alias=${distribution}-${version}"'
  - 'sudo -E su $USER -c "[ ${distribution} == debian ] || lxc image copy images:${distribution}/${version}/amd64 local: --alias=${distribution}-${version}"'
  - 'sudo -E su $USER -c "[ ${distribution} == ubuntu ] && lxc image copy ubuntu:${version} local: --alias=${distribution}-${version}" || true'
## configure network
  - ifconfig -a
  - sudo lxc info
  - sudo lxc network list
  - sudo lxc network create lxdbr0
  - sudo lxc network show lxdbr0
  - sudo lxc network attach-profile lxdbr0 default ens4
  - sudo lxc profile device get default ens4 nictype || true
  - sudo service lxd restart
  - ps ax | grep dnsmasq
  - systemctl status -l --no-pager lxd || true
  - cat /etc/network/interfaces.d/50-cloud-init.cfg
  - sudo lxc network list
# configure storage pool
  - sudo lxc storage list
  - sudo lxc storage create pool1 zfs
  - sudo lxc storage list
  - sudo zpool list
  - sudo lxc profile device add default root disk path=/ pool=pool1
  - sudo lxc profile show default
## ssh key for lxd_cli ?
  - ls ~/.ssh
  - ssh-keygen -t rsa -b 2048 -f ~/.ssh/id_rsa -P ""
## sudo/su get us a non-usual PATH ...
  - '[ "X${distribution}" == "Xcentos" ] && sudo -E su $USER -c "sh -x ./test/lxd/centos-ssh-image.sh" || true'
  - sudo -E su $USER -c "lxc launch ${distribution}-${version} run-${distribution}-${version//./}"
#  - sudo -E su $USER -c "lxc start run-${distribution}-${version//./}"
  - sudo -E su $USER -c "lxc exec run-${distribution}-${version//./} -- env"
  - '[ "X${distribution}" != "Xalpine" ] && sudo -E su $USER -c "lxc exec run-${distribution}-${version//./} -- dhclient eth0" || true'
  - sudo -E su $USER -c "lxc exec run-${distribution}-${version//./} -- ping -c 1 8.8.8.8"
  - '[ "X${distribution}" == "Xubuntu" ] && sudo -E su $USER -c "lxc exec run-${distribution}-${version//./} -- apt-get update" || true'
  - '[ "X${distribution}" == "Xubuntu" ] && sudo -E su $USER -c "lxc exec run-${distribution}-${version//./} -- apt-get -y install python python-apt aptitude python-pip libssl-dev python-dev libffi-dev" || true'
  - '[ "X${distribution}" == "Xcentos" -a "X${version}" == "X6" ] && sudo -E su $USER -c "lxc exec run-${distribution}-${version//./} -- rpm -iUvh http://dl.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm" || true'
  - '[ "X${distribution}" == "Xcentos" -a "X${version}" == "X7" ] && sudo -E su $USER -c "lxc exec run-${distribution}-${version//./} -- rpm -iUvh http://dl.fedoraproject.org/pub/epel/7/x86_64/e/epel-release-7-8.noarch.rpm" || true'
  - '[ "X${distribution}" == "Xcentos" ] && sudo -E su $USER -c "lxc exec run-${distribution}-${version//./} -- yum update" || true'
  - '[ "X${distribution}" == "Xcentos" ] && sudo -E su $USER -c "lxc exec run-${distribution}-${version//./} -- yum -y install python python-pip openssl-devel python-devel libffi-devel \"@Development tools\"" || true'
  - sudo -E su $USER -c "lxc exec run-${distribution}-${version//./} -- pip install --upgrade pip"
  - sudo -E su $USER -c "lxc exec run-${distribution}-${version//./} -- pip install cryptography==${cryptography_version}"
  - sudo -E su $USER -c "lxc exec run-${distribution}-${version//./} -- pip install ansible==${ansible_version}"
  - sudo -E su $USER -c "lxc exec run-${distribution}-${version//./} -- ansible --version"
  - "echo localhost > inventory"
## enable ansible profiling (https://github.com/jlafon/ansible-profile)
#  - "printf '[defaults]\ncallback_whitelist = profile_tasks' > ansible.cfg"
#  - sudo -E su $USER -c "lxc file push inventory ansible.cfg run-${distribution}-${version//./}/root/"
  - sudo -E su $USER -c "lxc file push inventory run-${distribution}-${version//./}/root/"
## these lines are necessary so lxc mount is read-write, https://github.com/lxc/lxd/issues/1879
  - chmod -R go+w $PWD
## OR
  - sudo -E su $USER -c "lxc config show run-${distribution}-${version//./}"
## FIXME! awk extraction is working in shell but not in travis... relying on global chmod as test ephemeral environment. DON'T USE IN PRODUCTION!
  - sudo -E su $USER -c "lxc config show run-${distribution}-${version//./} | awk -F'[\":,]' '/Hostid/ { print $13 }'"
  - sudo -E su $USER -c "lxc config show run-${distribution}-${version//./} | sed -ne '/idmap.next/ s/.*\"Hostid\":\([0-9]*\),.*/\1/p'"
#  - CUID=`sudo -E su $USER -c "lxc config show run-${distribution}-${version//./} | awk -F'[\":,]' '/idmap.next.*Hostid/ { print $13 }'"`
  - CUID=`sudo -E su $USER -c "lxc config show run-${distribution}-${version//./} | sed -ne '/idmap.next/ s/.*\"Hostid\":\([0-9]*\),.*/\1/p'"`
  - "echo setfacl -Rm user:$CUID:rwx ${PWD%/*}"
  - "setfacl -Rm \"user:$CUID:rwx\" ${PWD%/*} || true"
  - sudo -E su $USER -c "lxc config device add run-${distribution}-${version//./} sharedroles disk path=/etc/ansible/roles source=${PWD%/*}"
  - sudo -E su $USER -c "lxc exec run-${distribution}-${version//./} -- mount"
  - sudo -E su $USER -c "lxc exec run-${distribution}-${version//./} -- pwd"

script:
  - sudo -E su $USER -c "lxc exec run-${distribution}-${version//./} -- ansible-playbook -i inventory --syntax-check /etc/ansible/roles/juju4.lxd/test/integration/default/default.yml"
  - sudo -E su $USER -c "lxc exec run-${distribution}-${version//./} -- ansible-playbook -i inventory --connection=local --become -vvvv /etc/ansible/roles/juju4.lxd/test/integration/default/default.yml"
## FIXME! Travis request: Build config file had a parse error: "mapping values are not allowed in this context at line 72 column 321".
#  - sudo -E su $USER -c "lxc exec run-${distribution}-${version//./} -- ansible-playbook -i inventory /etc/ansible/roles/juju4.lxd/test/integration/default/default.yml --connection=local --become | tee /tmp/idempotency.log | grep -q 'changed=0.*failed=0'  && (echo 'Idempotence test: pass' && exit 0) || (echo 'Idempotence test: fail' && cat /tmp/idempotency.log && exit 1)"
  - sudo -E su $USER -c "lxc exec run-${distribution}-${version//./} -- /etc/ansible/roles/juju4.lxd/test/integration/default/serverspec/run-local-tests.sh"

after_failure:
  # Check what happened on systemd systems.
  - sudo -E su $USER -c "lxc exec run-${distribution}-${version//./} -- systemctl -l --no-pager status"
  - sudo -E su $USER -c "lxc exec run-${distribution}-${version//./} -- systemctl -l --no-pager --failed"
  - sudo -E su $USER -c "lxc exec run-${distribution}-${version//./} -- journalctl -xe --no-pager"

after_script:
  - sudo -E su $USER -c "lxc stop run-${distribution}-${version//./} --force"
  - sudo -E su $USER -c "lxc delete run-${distribution}-${version//./}"

notifications:
  webhooks: https://galaxy.ansible.com/api/v1/notifications/
